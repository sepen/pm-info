#!/bin/bash
#
# pm-info: battery info from APM/ACPI files
#

msgError() {
  echo "Error, $@" 2>&1
  exit 1
}

msgUsage() {
  cat << __EOF__
Usage: pm-info [option(s)]
Where options are:
  -v           Print verbose info
  -k           Print kernel driver version
  -b           Print bios driver version
  -s           Print battery status
  -c           Print battery capacity
  -cf          Print battery capacity full
  -cw          Print battery capacity warning
  -cl          Print battery capacity low
  -mv          Print battery voltage
  -mf          Print battery voltage full
  -p           Print battery charge percentage
  -t           Print battery charge time
  -u           Print units for battery charge time
  -e           Print end of line
  -C "STRING"  Print output in custom format
  -h           Print this help information
  -V           Print version information
See pm-info(1) manual page for more information and options.
__EOF__
  exit 0
}

msgVersion() {
  echo "pm-info 0.2 by Jose V Beneyto <sepen@crux.nu>"
  exit 0
}

getKernelDriverVersion() {
  echo -n $KERNEL_DRIVER_VERSION
}

getBiosVersion() {
  echo -n $BIOS_VERSION
}

getBattStatus() {
  echo -n $BATT_STATUS
}

getBattCapacity() {
  echo -n $BATT_CAPACITY
}

getBattCapacityFull() {
  echo -n $BATT_CAPACITY_FULL
}

getBattCapacityWarning() {
  echo -n $BATT_CAPACITY_WARNING
}

getBattCapacityLow() {
  echo -n $BATT_CAPACITY_LOW
}

getBattVoltage() {
  echo -n $BATT_VOLTAGE
}

getBattVoltageFull() {
  echo -n $BATT_VOLTAGE_FULL
}

getBattPercentage() {
  echo -n $BATT_PERCENTAGE
}

getBattTime() {
  echo -n $BATT_TIME
}

getBattTimeUnits() {
  echo -n $BATT_TIME_UNITS
}

getCustomFormat() {
  echo $@ | sed \
    -e "s|%k|$KERNEL_DRIVER_VERSION|g" \
    -e "s|%b|$BIOS_VERSION|g" \
    -e "s|%s|$BATT_STATUS|g" \
    -e "s|%cf|$BATT_CAPACITY_FULL|g" \
    -e "s|%cw|$BATT_CAPACITY_WARNING|g" \
    -e "s|%cl|$BATT_CACACITY_LOW|g" \
    -e "s|%c|$BATT_CAPACITY|g" \
    -e "s|%mv|$BATT_VOLTAGE|g" \
    -e "s|%mf|$BATT_VOLTAGE_FULL|g" \
    -e "s|%p|$BATT_PERCENTAGE|g" \
    -e "s|%t|$BATT_TIME|g" \
    -e "s|%u|$BATT_TIME_UNITS|g"
}

getStatus() {
  if [ $VERBOSE -eq 1 ]; then
    [ "$PM_MODE" == "apm" ] && printf "Driver version:\t\t%5s\n" $KERNEL_DRIVER_VERSION
    [ "$PM_MODE" == "apm" ] && printf "Bios version:\t\t%5s\n" $BIOS_VERSION
    printf "Battery %-16s %5s\n" $BATT_STATUS: $BATT_PERCENTAGE
    [ "$PM_MODE" == "acpi" ] && printf "Battery capacity:\t%5s mAh\n" $BATT_CAPACITY
    [ "$PM_MODE" == "acpi" ] && printf "Battery full:\t\t%5s mAh\n" $BATT_CAPACITY_FULL
    [ "$PM_MODE" == "acpi" ] && printf "Battery warning:\t%5s mAh\n" $BATT_CAPACITY_WARNING
    [ "$PM_MODE" == "acpi" ] && printf "Battery low:\t\t%5s mAh\n" $BATT_CAPACITY_LOW
    [ "$PM_MODE" == "acpi" ] && printf "Battery voltage:\t%5s mV\n" $BATT_VOLTAGE
    [ "$PM_MODE" == "acpi" ] && printf "Battery voltage full:\t%5s mV\n" $BATT_VOLTAGE_FULL
    [ "$PM_MODE" == "apm" ] && printf "Battery remaining:\t%5s %s\n" $BATT_TIME $BATT_TIME_UNITS
  else
    echo "$BATT_STATUS: $BATT_PERCENTAGE"
  fi
}

initAPM() {
  # discard fist read
  read < $APM_FILE
  # get APM values
  read \
    KERNEL_DRIVER_VERSION \
    BIOS_VERSION \
    X \
    BATT_STATUS \
    Y \
    Z \
    BATT_PERCENTAGE \
    BATT_TIME \
    BATT_TIME_UNITS \
    < $APM_FILE
  # transform raw status to string
  case $BATT_STATUS in
      0x00) BATT_STATUS="discharging" ;;
      0x01) BATT_STATUS="charging" ;;
  esac
}

initACPI() {
  # check if battery is present
  if grep -q 'present: .* no' $ACPI_DIR/info; then
    BATT_STATUS="not-present"
    BATT_CAPACITY="0"; BATT_CAPACITY_FULL="$BATT_CAPACITY"
    BATT_CAPACITY_WARNING="$BATT_CAPACITY"; BATT_CAPACITY_LOW="$BATT_CAPACITY"
    BATT_PERCENTAGE="0%"
    BATT_VOLTAGE="0"; BATT_VOLTAGE_FULL="$BATT_VOLTAGE"
  else
    # discard first read
    cat $ACPI_DIR/state >/dev/null
    # get ACPI values
    BATT_STATUS="$(grep -e 'charging state:' $ACPI_DIR/state | awk '{print $3}')"
    BATT_CAPACITY="$(grep -e 'remaining capacity:' $ACPI_DIR/state | awk '{print $3}')"
    BATT_CAPACITY_FULL="$(grep -e 'design capacity:' $ACPI_DIR/info | awk '{print $3}')"
    BATT_CAPACITY_WARNING="$(grep -e 'design capacity warning:' $ACPI_DIR/info | awk '{print $4}')"
    BATT_CAPACITY_LOW="$(grep -e 'design capacity low:' $ACPI_DIR/info | awk '{print $4}')"
    let BATT_PERCENTAGE="($BATT_CAPACITY*100)/$BATT_CAPACITY_FULL"
    BATT_PERCENTAGE="${BATT_PERCENTAGE}%"
    BATT_VOLTAGE="$(grep -e 'present voltage:' $ACPI_DIR/state | awk '{print $3}')"
    BATT_VOLTAGE_FULL="$(grep -e 'design voltage:' $ACPI_DIR/info | awk '{print $3}')"
  fi
}

init() {
  if [ -f /proc/apm ]; then
    APM_FILE="/proc/apm"
    PM_MODE="apm"
    initAPM
  elif [ -d /proc/acpi/battery ]; then
    ACPI_DIR="$(find /proc/acpi/battery -type f -name info -exec dirname {} \;)"
    if [ -d "$ACPI_DIR" ]; then
      PM_MODE="acpi"
      initACPI
    fi
  fi
  [ -z "$PM_MODE" ] && msgError "can't find APM/ACPI files"
}

main() {
  if [ $DEBUG -eq 1 ]; then
    echo "PM_MODE=$PM_MODE; APM_FILE=$APM_FILE; ACPI_DIR=$ACPI_DIR"
    #exit 0
  fi
  if [ $# -eq 0 ]; then
    getStatus
  elif [ "$1" = "-v" ]; then
    VERBOSE=1
    getStatus
  else
    while [ "$1" ]; do
      case $1 in
        -k) getKernelDriverVersion ;;
        -b) getBiosVersion ;;
        -s) getBattStatus ;;
        -c) getBattCapacity ;;
        -cf) getBattCapacityFull ;;
        -cw) getBattCapacityWarning ;;
        -cl) getBattCapacityLow ;;
        -mv) getBattVoltage ;;
        -mf) getBattVoltageFull ;;
        -p) getBattPercentage ;;
        -t) getBattTime ;;
        -u) getBattTimeUnits ;;
        -C) shift; getCustomFormat "$@"; break ;;
        -e) echo ;;
        -h) msgUsage ;;
	-V) msgVersion ;;
      esac
      shift
    done
  fi
}

readonly DEBUG=0

VERBOSE=0

PM_MODE=""      # apm or apci
APM_FILE=""     # /proc/apm
ACPI_DIR=""     # /proc/acpi/battery/<id>/

KERNEL_DRIVER_VERSION=""
BIOS_VERSION=""
BATT_STATUS=""
BATT_CAPACITY=""
BATT_CAPACITY_FULL=""
BATT_CAPACITY_WARNING=""
BATT_CACACITY_LOW=""
BATT_VOLTAGE=""
BATT_VOLTAGE_FULL=""
BATT_PERCENTAGE=""
BATT_TIME=""
BATT_TIME_UNITS=""

init
main $@

exit 0

# End of file
